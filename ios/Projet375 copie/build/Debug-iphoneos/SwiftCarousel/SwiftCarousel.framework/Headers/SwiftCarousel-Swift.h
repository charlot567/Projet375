// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;
@class UIGestureRecognizer;
@protocol SwiftCarouselDelegate;

SWIFT_CLASS("_TtC13SwiftCarousel13SwiftCarousel")
@interface SwiftCarousel : UIView
/**
  Carousel delegate that handles events like didSelect.
*/
@property (nonatomic, weak) id <SwiftCarouselDelegate> _Nullable delegate;
/**
  Bool to set if by tap on item carousel should select it (scroll to it).
*/
@property (nonatomic) BOOL selectByTapEnabled;
/**
  If there is defaultSelectedIndex and was selected, the variable is true.
  Otherwise it is not.
*/
@property (nonatomic) BOOL didSetDefaultIndex;
/**
  Carousel items. You can setup your carousel using this method (static items), or
  you can also see \code
  itemsFactory
  \endcode, which uses closure for the setup.
  Warning: original views are copied internally and are not guaranteed to be complete when the \code
  didSelect
  \endcode and \code
  didDeselect
  \endcode delegate methods are called. Use \code
  itemsFactory
  \endcode instead to avoid this limitation.
*/
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull items;
/**
  Factory for carousel items. Here you specify how many items do you want in carousel
  and you need to specify closure that will create that view. Remember that it should
  always create new view, not give the same reference all the time.
  If the factory closure returns a reference to a view that has already been returned, a SwiftCarouselError.ViewAlreadyAdded error is thrown.
  You can always setup your carousel using \code
  items
  \endcode instead.
*/
- (BOOL)itemsFactoryWithItemsCount:(NSInteger)count error:(NSError * _Nullable * _Nullable)error factory:(SWIFT_NOESCAPE UIView * _Nonnull (^ _Nonnull)(NSInteger))factory;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize carousel with items & frame.
  Warning: original views in \code
  items
  \endcode are copied internally and are not guaranteed to be complete when the \code
  didSelect
  \endcode and \code
  didDeselect
  \endcode delegate methods are called. Use \code
  itemsFactory
  \endcode instead to avoid this limitation.
  \param frame Carousel frame.

  \param items Items to put in carousel.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame items:(NSArray<UIView *> * _Nonnull)items;
- (void)layoutSubviews;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)viewTapped:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
/**
  Select item in the Carousel.
  \param choice Item index to select.

  \param animated Bool to tell if the selection should be animated.

*/
- (void)selectItem:(NSInteger)choice animated:(BOOL)animated;
@end


@interface SwiftCarousel (SWIFT_EXTENSION(SwiftCarousel)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)_ shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)shouldRecognizeSimultaneouslyWithGestureRecognizer;
@end

@class UIScrollView;

@interface SwiftCarousel (SWIFT_EXTENSION(SwiftCarousel)) <UIScrollViewDelegate>
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
@end


SWIFT_PROTOCOL("_TtP13SwiftCarousel21SwiftCarouselDelegate_")
@protocol SwiftCarouselDelegate
@optional
/**
  Delegate method that fires up when item has been selected.
  If there was an animation, it fires up <em>after</em> animation.
  Warning! Do not rely on item to get index from your data source.
  Index is passed as a variable in that function and you should use it instead.
  \param item Item that is selected. You can style it as you want.

  \param index Index of selected item that you can use with your data source.

  \param tapped Indicate that the item has been tapped, true it means that it was tapped before the selection, and false that was scrolled.


  returns:
  Return UIView that you customized (or not).
*/
- (UIView * _Nullable)didSelectItemWithItem:(UIView * _Nonnull)item index:(NSInteger)index tapped:(BOOL)tapped;
/**
  Delegate method that fires up when item has been deselected.
  If there was an animation, it fires up <em>after</em> animation.
  Warning! Do not rely on item to get index from your data source.
  Index is passed as a variable in that function and you should use it instead.
  \param item Item that is deselected. You can style it as you want.

  \param index Index of deselected item that you can use with your data source.


  returns:
  Return UIView that you customized (or not).
*/
- (UIView * _Nullable)didDeselectItemWithItem:(UIView * _Nonnull)item index:(NSInteger)index;
/**
  Delegate method that fires up when Carousel has been scrolled.
  \param offset New offset of the Carousel.

*/
- (void)didScrollToOffset:(CGPoint)offset;
/**
  Delegate method that fires up just before someone did dragging.
  \param offset Current offset of the Carousel.

*/
- (void)willBeginDraggingWithOffset:(CGPoint)offset;
/**
  Delegate method that fires up right after someone did end dragging.
  \param offset New offset of the Carousel.

*/
- (void)didEndDraggingWithOffset:(CGPoint)offset;
@end


@interface UIView (SWIFT_EXTENSION(SwiftCarousel))
/**
  Method to copy UIView using archivizing.

  returns:
  Copied UIView (different memory address than current)
*/
- (UIView * _Nullable)copyViewAndReturnError:(NSError * _Nullable * _Nullable)error;
@end

#pragma clang diagnostic pop
